// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Seller {
//   id String @id @default(uuid())
//   firstname String 
//   lastname String 
//   business_name String
//   business_email String @unique
//   business_address String?
//   business_address_2 String?
//   business_city String?
//   business_state String?
//   business_country String?
//   postal_code String?
//   phone BigInt?
//   phone_2 BigInt?
//   password String?
//   verified Boolean @default(false)
//   status Boolean @default(true)
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   deleted_at DateTime?

// }

model User {
  id         String           @id @default(uuid())
  email      String           @unique
  password   String
  firstName  String
  lastName   String
  profile    CustomerProfile?
  verified   Boolean          @default(false)
  orders     Order[]
  reviews    Review[]
  cart       CartItem[]
  role       UserRole         @default(CUSTOMER)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  deleted_at DateTime?

  // relations
  Address Address[]
}

enum UserRole {
  ADMIN
  CUSTOMER
  SELLER
}

model CustomerProfile {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  phoneNumber String?
  address     Address[]
  DOB         DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// model User {
//   id String @id @default(uuid())
//   name String 
//   age Int 
//   email String @unique
//   password String
//   address  Address[]
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
// }

model Address {
  id          String @id @default(uuid())
  address     String
  city        String
  state       String
  country     String
  postal_code String
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String

  CustomerProfile CustomerProfile[]
}

model PersonalAccessCodes {
  id          String    @id @default(uuid())
  userType    UserType
  userId      String
  accessToken Int
  tokenName   String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  expires_at  DateTime
  deleted_at  DateTime?

  @@unique([userType, userId, accessToken])
}

enum UserType {
  Seller
  User
  Admin
}

model Product {
  id             String      @id @default(uuid())
  name           String
  description    String
  color          String
  size           String
  price          String
  stock          Int
  overview       String
  specifications String
  key_features   String
  images         String[]
  // category    Category      @relation(fields: [categoryId], references: [id])
  // categoryId  String
  brand          Brand       @relation(fields: [brandId], references: [id])
  brandId        String
  offers         Offer[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  reviews        Review[]
  shipping_fee   Int
  rating         Int

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Brand {
  id        String       @id @default(uuid())
  name      String       @unique
  logo      String?
  products  Product[]
  offers    BrandOffer[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Offer {
  id        String   @id @default(uuid())
  name      String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  discount  Float
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrandOffer {
  id        String   @id @default(uuid())
  name      String
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   String
  discount  Float
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotion {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  discount    Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  minAmount   Float?
  maxDiscount Float?
  usageLimit  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  status      OrderStatus  @default(PENDING)
  totalAmount Float
  promotion   Promotion?   @relation(fields: [promotionId], references: [id])
  promotionId String?
  transaction Transaction?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String        @id @default(uuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
